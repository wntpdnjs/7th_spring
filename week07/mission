깃허브링크 :https://github.com/wntpdnjs/mission5.git

### `@RestControllerAdvice`의 장점

1. **예외 처리의 전역화**

    `@RestControllerAdvice`는 모든 컨트롤러에서 발생하는 예외를 한 곳에서 처리하도록 전역 예외 처리를 제공합니다. 이를 통해 코드의 중복을 줄이고, 특정 예외 발생 시 일관된 응답을 쉽게 반환할 수 있습니다.


1. **코드 중복 감소**

    개별 컨트롤러마다 예외 처리를 추가하지 않아도 되므로, 코드 중복이 줄어듭니다. 예를 들어, 공통적인 예외인 `NullPointerException`, `IllegalArgumentException` 등을 한 곳에서 처리하면 컨트롤러 코드가 더 간결해집니다.

2. **유지보수 용이성**

    예외 처리가 한 곳에 모여 있어 관리가 쉽고, 예외 처리 로직을 수정할 때 전역적으로 변경이 가능해 유지보수성이 높아집니다. 새 예외 유형을 추가할 때도 `@RestControllerAdvice` 클래스만 수정하면 되므로 관리가 편리합니다.

3. **일관된 응답 형식 제공**

    모든 예외에 대해 공통된 응답 형식을 제공할 수 있습니다. 예외가 발생할 때마다 공통 포맷을 유지하면 클라이언트가 응답을 처리하는 데 도움이 됩니다.

4. **구체적인 예외 유형별 처리 가능**

    예외를 세분화해, 특정 예외에 대해 각기 다른 응답 처리를 할 수 있습니다. 예를 들어, `MethodArgumentNotValidException`과 같은 특정 예외를 별도로 처리하고 다른 예외에는 공통 핸들러를 적용할 수 있습니다.


### `@RestControllerAdvice`가 없을 경우의 불편한 점

1. **개별 컨트롤러의 코드 중복 증가**

    각 컨트롤러에서 발생하는 예외를 따로 처리해야 하므로, 비슷한 예외 처리 코드가 여러 컨트롤러에 반복적으로 나타나게 됩니다. 이는 코드 중복을 일으키며, 수정할 때 일일이 모든 컨트롤러의 코드를 변경해야 합니다.

2. **유지보수 어려움**

    특정 예외에 대한 처리가 여러 곳에 분산되면 예외 처리 로직을 수정하기 어려워집니다. 예외 처리가 여러 컨트롤러에 산재해 있으면, 새로운 예외가 추가되거나 기존 예외 처리 로직을 변경할 때 누락되거나 비일관적인 처리가 발생할 수 있습니다.

3. **일관된 응답 형식 제공 어려움**

    전역 예외 처리가 없으면 각 컨트롤러에서 예외 응답 형식을 따로 정의해야 하므로, 클라이언트에 전달되는 에러 응답 형식이 일관되지 않을 수 있습니다. 클라이언트는 응답 형식이 달라지면 예외 처리가 복잡해질 수 있습니다.

4. **테스트의 복잡성 증가**

    모든 컨트롤러에 예외 처리가 분산되어 있으면, 개별 예외 상황을 테스트하기 어려워집니다. `@RestControllerAdvice`를 사용하면 전역적으로 예외 처리를 설정할 수 있어 테스트 코드 작성이 더 간단해집니다.