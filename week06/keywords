1. 지연로딩과 즉시로딩 차이
- - **지연 로딩 (Lazy Loading)**

      지연 로딩은 필요한 시점에 데이터를 로드하는 방식입니다. 객체를 처음 불러올 때는 연관된 엔티티를 로딩하지 않고, 실제로 해당 연관 데이터를 사용할 때 쿼리가 실행됩니다. 이 방식은 성능에 이점이 있지만, 지연 로딩된 데이터를 여러 번 접근할 경우 쿼리가 반복 실행되어 N+1 문제가 발생할 수 있습니다.

      - **장점**: 필요할 때만 데이터를 로딩하여 메모리 절약
      - **단점**: 사용 시점마다 쿼리가 실행될 수 있어 성능 이슈 발생 가능
  - **즉시 로딩 (Eager Loading)**

      즉시 로딩은 엔티티를 조회할 때 연관된 데이터도 함께 로드하는 방식입니다. 처음 쿼리가 실행될 때 모든 연관 데이터를 가져와서 이후에는 추가 쿼리가 필요하지 않습니다. 따라서 N+1 문제를 예방할 수 있지만, 필요하지 않은 데이터까지 로드되어 메모리 사용량이 증가할 수 있습니다.

      - **장점**: 추가 쿼리 없이 데이터를 바로 사용 가능
      - **단점**: 불필요한 데이터 로드로 메모리 낭비 가능

2. JPQL
-JSQL은 특정 기술이나 라이브러리 이름이라기보다는 Java에서 SQL 구문을 사용하여 쿼리를 실행하는 일반적인 방식을 의미합니다.
 JDBC와 같이 Java 코드에서 SQL 쿼리를 직접 작성하여 데이터베이스와 통신합니다.
 주로 간단한 데이터베이스 접근 작업에 사용되며, SQL 쿼리를 직접 작성하여 실행하므로 SQL에 대한 지식이 필요합니다.

 3. @EntityGraph
 - @EntityGraph를 사용하면 원하는 연관 데이터를 한 번에 로드할 수 있어 추가 쿼리를 줄이고, 성능을 개선할 수 있습니다. 예를 들어, JOIN FETCH와 비슷한 방식으로 작동하지만, 엔티티의 특정 필드만 선택하여 효율적으로 로딩하는 데 유용합니다.

 4. Fetch Join
 -Fetch Join은 JPA에서 N+1 문제를 해결하기 위해 사용하는 기술입니다.
  연관된 엔티티들을 한 번의 쿼리로 함께 가져오는 방식으로, JOIN FETCH 구문을 사용합니다.
  예를 들어 @Query("SELECT m FROM Member m JOIN FETCH m.reviews")와 같이 작성하면, Member와 Review를 한 번의 쿼리로 가져올 수 있습니다.
  이를 통해 추가적인 쿼리 호출을 줄여 성능을 개선하는 데 유용합니다.

 5. QueryDSL
 -  QueryDSL은 Java에서 타입 안전하고 객체 지향적인 방식으로 쿼리를 작성할 수 있도록 해 주는 ORM 도구입니다.
    SQL을 코드에서 직접 작성하지 않고 메소드 체인 방식으로 쿼리를 작성하여 컴파일 시점에 오류를 발견할 수 있습니다.
    예를 들어 QMember.member.name.eq("John")과 같이 쿼리를 작성하면, SQL로 변환하여 실행되므로 SQL 인젝션 방지에도 유리합니다.
    JPA와 함께 사용되어 복잡한 쿼리를 타입 안전하게 작성하는 데 많이 사용됩니다.
 6. N+1 해결법
 - - **페치 조인 (Fetch Join)**

       관련된 데이터를 한 번의 쿼리로 모두 가져옵니다. 이렇게 하면 불필요한 추가 쿼리를 줄일 수 있습니다.

   - **배치 페치 (Batch Fetching)**

       여러 개의 연관된 엔티티를 한꺼번에 가져와서 쿼리 횟수를 줄입니다. 설정을 통해 한 번에 가져올 개수를 조정할 수 있습니다.

   - **엔티티 그래프 (Entity Graph)**

       필요한 연관 데이터를 선택적으로 로딩하도록 설정합니다. 이를 통해 필요한 데이터만 효율적으로 가져올 수 있습니다.

   - **지연 로딩 설정 조정 (Lazy Loading)**

       실제로 필요한 시점에만 연관 데이터를 로드하도록 합니다. 불필요한 데이터 로딩을 방지하여 성능을 개선할 수 있습니다.