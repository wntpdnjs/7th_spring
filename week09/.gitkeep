깃허브 : https://github.com/wntpdnjs/mission5.git
미션 & 워크북 : feaure/#9 브랜치에 구현해놨습니다!

Spring Data JPA의 Paging
page : Page는 페이징된 데이터와 함께 **전체 데이터 개수(total count)**와 전체 페이지 수 정보를 제공합니다.
    즉, 클라이언트가 요청한 데이터뿐만 아니라, 페이징 정보를 계산하기 위해 추가적인 count 쿼리를 실행합니다.
        주로 UI에서 페이지 번호를 표시하거나, 전체 데이터 수를 보여줘야 할 때 사용합니다.
slice : Slice는 요청된 데이터만 반환하며, 다음 페이지가 있는지 여부만 알려줍니다.
    COUNT 쿼리를 실행하지 않으므로 성능적으로 Page보다 더 가볍습니다.주로 "더보기" 방식의 페이징을 구현할 때 사용합니다.

객체 그래프 탐색 : 객체 간의 연관 관계를 따라가면서 관련된 데이터를 조회하거나 사용하는 과정을 말합니다.
    객체 지향 프로그래밍에서 하나의 객체가 다른 객체를 참조할 때, 이러한 참조를 활용하여 연관된 객체의 데이터를 접근하거나 조작할 수 있습니다.
        주요특징1 : 단방향 참조
                 한 객체에서 다른 객체로만 탐색 가능.
                 예: User에서 Address로 탐색 가능하지만, Address에서 User로 탐색은 불가능(양방향 매핑이 없는 경우).
               2: 연관 관계를 따라 탐색
                    객체가 연관된 다른 객체를 포함할 때 이를 따라가며 데이터 접근.
                    깊은 관계일수록 탐색 경로가 길어짐.
               3: Lazy vs Eager 로딩 (JPA와 관련):
                 JPA에서 객체 그래프를 탐색할 때 **지연 로딩(Lazy Loading)**과 즉시 로딩(Eager Loading) 전략에 따라 실제 데이터 로드 시점이 결정됩니다.
                 Lazy 로딩: 필요한 시점에만 객체를 로드.
                 Eager 로딩: 연관된 객체를 미리 모두 로드.

