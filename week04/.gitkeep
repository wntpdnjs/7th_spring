DI :  객체 간의 의존성을 외부에서 주입해주는 개념이다. 스프링에서 객체 생성과 주입을 컨테이너가 관리하여 의존성 결합을 줄일 수 있다.
 이를 통해 코드의 유연성과 테스트 용이성이 높아지고, 유지보수 시 객체 간 결합도를 낮출 수 있다.

IoC : 프로그램의 제어권을 개발자가 아닌 스프링과 같은 프레임워크에 넘기는 개념이다. 객체 생성 및 생명주기 관리를 프레임워크가 담당함으로써 코드의 독립성을 높이고 재사용성을 증대시킬 수 있다.
  IoC를 통해 객체 간 결합도를 낮추어 유연한 구조를 가질 수 있다.

 프레임워크와 API의 차이 : 프레임워크는 개발자가 코드의 구조와 흐름을 따르도록 강제하는 환경으로, 특정 규칙과 제어권을 제공하여 개발을 돕는 틀이다. 반면, API(Application Programming Interface)는 특정 기능을 수행할 수 있도록 제공되는 인터페이스로, 개발자가 필요한 기능만을 호출하여 사용하는 방식이다.
  프레임워크는 전체적인 구조와 흐름을 제공하는 반면, API는 특정 기능에 접근할 수 있는 도구 역할을 한다.

AOP : 코드의 핵심 비즈니스 로직과 공통적으로 사용하는 기능(예: 로깅, 보안, 트랜잭션 관리 등)을 분리하여 모듈화하는 프로그래밍 기법이다. 이를 통해 중복 코드를 제거하고 코드의 가독성과 유지보수성을 높일 수 있다.
스프링에서 AOP는 주로 애노테이션과 프록시를 사용하여 횡단 관심사를 비즈니스 로직에 쉽게 적용하도록 지원한다.

서블릿 : 자바 기반의 웹 애플리케이션에서 클라이언트의 요청을 처리하고 응답을 생성하는 서버 측 컴포넌트이다. 주로 HTTP 프로토콜을 사용하여 웹 서버와 통신하며, 클라이언트 요청을 받아 비즈니스 로직을 수행하고 HTML 등의 응답을 생성하여 반환한다.
서블릿은 자바 웹 애플리케이션의 기본 구성 요소로, 요청-응답 사이클을 관리하여 동적인 웹 페이지를 생성하는 데 사용된다.
